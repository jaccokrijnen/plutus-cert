Require Import Coq.Strings.String.
From PlutusCert Require Import Language.PlutusIR.Analysis.FreeVars.
From PlutusCert Require Import Language.PlutusIR.
Local Open Scope string_scope.


(* Taken from dumps of plutus compiler *)
Definition pir_0_original     := Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("ByteString") (Unique (0)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (11)))) (tt)) (nil) (Name ("Bool_match") (Unique (12))) (cons (Constructor (Name ("True") (Unique (13))) (0)) (cons (Constructor (Name ("False") (Unique (14))) (0)) (nil))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("verifySignature") (Unique (57))) (tt)) (LamAbs (Name ("arg") (Unique (53))) (tt) (LamAbs (Name ("arg") (Unique (54))) (tt) (LamAbs (Name ("arg") (Unique (55))) (tt) (Apply (LamAbs (Name ("b") (Unique (56))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (56))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Apply (Builtin (VerifySignature)) (Var (Name ("arg") (Unique (53))))) (Var (Name ("arg") (Unique (54))))) (Var (Name ("arg") (Unique (55)))))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("String") (Unique (2)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (60)))) (tt)) (nil) (Name ("Unit_match") (Unique (61))) (cons (Constructor (Name ("Unit") (Unique (62))) (0)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("trace") (Unique (70))) (tt)) (LamAbs (Name ("arg") (Unique (68))) (tt) (Apply (LamAbs (Name ("b") (Unique (69))) (tt) (Var (Name ("Unit") (Unique (62))))) (Apply (Builtin (Trace)) (Var (Name ("arg") (Unique (68)))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Integer") (Unique (1)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("takeByteString") (Unique (5))) (tt)) (Builtin (TakeByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("subtractInteger") (Unique (27))) (tt)) (Builtin (SubtractInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha3_") (Unique (8))) (tt)) (Builtin (SHA3))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha2_") (Unique (7))) (tt)) (Builtin (SHA2))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("remainderInteger") (Unique (32))) (tt)) (Builtin (RemainderInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("quotientInteger") (Unique (31))) (tt)) (Builtin (QuotientInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("multiplyInteger") (Unique (28))) (tt)) (Builtin (MultiplyInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("modInteger") (Unique (30))) (tt)) (Builtin (ModInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanInteger") (Unique (44))) (tt)) (LamAbs (Name ("arg") (Unique (41))) (tt) (LamAbs (Name ("arg") (Unique (42))) (tt) (Apply (LamAbs (Name ("b") (Unique (43))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (43))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (LessThanInteger)) (Var (Name ("arg") (Unique (41))))) (Var (Name ("arg") (Unique (42))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (48))) (tt)) (LamAbs (Name ("arg") (Unique (45))) (tt) (LamAbs (Name ("arg") (Unique (46))) (tt) (Apply (LamAbs (Name ("b") (Unique (47))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (47))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (45))))) (Var (Name ("arg") (Unique (46))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanByteString") (Unique (20))) (tt)) (LamAbs (Name ("arg") (Unique (17))) (tt) (LamAbs (Name ("arg") (Unique (18))) (tt) (Apply (LamAbs (Name ("b") (Unique (19))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (19))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (LtByteString)) (Var (Name ("arg") (Unique (17))))) (Var (Name ("arg") (Unique (18))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanInteger") (Unique (36))) (tt)) (LamAbs (Name ("arg") (Unique (33))) (tt) (LamAbs (Name ("arg") (Unique (34))) (tt) (Apply (LamAbs (Name ("b") (Unique (35))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (35))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (GreaterThanInteger)) (Var (Name ("arg") (Unique (33))))) (Var (Name ("arg") (Unique (34))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanEqInteger") (Unique (40))) (tt)) (LamAbs (Name ("arg") (Unique (37))) (tt) (LamAbs (Name ("arg") (Unique (38))) (tt) (Apply (LamAbs (Name ("b") (Unique (39))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (39))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (GreaterThanEqInteger)) (Var (Name ("arg") (Unique (37))))) (Var (Name ("arg") (Unique (38))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanByteString") (Unique (24))) (tt)) (LamAbs (Name ("arg") (Unique (21))) (tt) (LamAbs (Name ("arg") (Unique (22))) (tt) (Apply (LamAbs (Name ("b") (Unique (23))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (23))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (GtByteString)) (Var (Name ("arg") (Unique (21))))) (Var (Name ("arg") (Unique (22))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("error") (Unique (64))) (tt)) (TyAbs (TyName (Name ("e") (Unique (58)))) (tt) (LamAbs (Name ("thunk") (Unique (59))) (tt) (Error (tt))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsInteger") (Unique (52))) (tt)) (LamAbs (Name ("arg") (Unique (49))) (tt) (LamAbs (Name ("arg") (Unique (50))) (tt) (Apply (LamAbs (Name ("b") (Unique (51))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (51))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (EqInteger)) (Var (Name ("arg") (Unique (49))))) (Var (Name ("arg") (Unique (50))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsByteString") (Unique (16))) (tt)) (LamAbs (Name ("arg") (Unique (9))) (tt) (LamAbs (Name ("arg") (Unique (10))) (tt) (Apply (LamAbs (Name ("b") (Unique (15))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (15))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (EqByteString)) (Var (Name ("arg") (Unique (9))))) (Var (Name ("arg") (Unique (10))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyString") (Unique (66))) (tt)) (Constant (Some (ValueOf (DefaultUniString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyByteString") (Unique (25))) (tt)) (Constant (Some (ValueOf (DefaultUniByteString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("dropByteString") (Unique (6))) (tt)) (Builtin (DropByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("divideInteger") (Unique (29))) (tt)) (Builtin (DivideInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("concatenate") (Unique (4))) (tt)) (Builtin (Concatenate))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Char") (Unique (3)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("charToString") (Unique (67))) (tt)) (Builtin (CharToString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("appendString") (Unique (65))) (tt)) (Builtin (Append))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("addInteger") (Unique (26))) (tt)) (Builtin (AddInteger))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (72))) (cons (Constructor (Name ("Fixed") (Unique (73))) (1)) (cons (Constructor (Name ("Never") (Unique (74))) (0)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (77))) (tt)) (Var (Name ("False") (Unique (14))))) (nil)) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("wild") (Unique (78))) (tt)) (Var (Name ("ds") (Unique (75))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (72)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (48)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("keep") (Unique (77)))))) (Var (Name ("Unit") (Unique (62)))))))))))))))))))))))))))))))))))))))))).

Definition pir_1_renamed      := Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("ByteString") (Unique (82)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (83)))) (tt)) (nil) (Name ("Bool_match") (Unique (86))) (cons (Constructor (Name ("True") (Unique (84))) (0)) (cons (Constructor (Name ("False") (Unique (85))) (0)) (nil))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("verifySignature") (Unique (87))) (tt)) (LamAbs (Name ("arg") (Unique (88))) (tt) (LamAbs (Name ("arg") (Unique (89))) (tt) (LamAbs (Name ("arg") (Unique (90))) (tt) (Apply (LamAbs (Name ("b") (Unique (91))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (91))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Apply (Builtin (VerifySignature)) (Var (Name ("arg") (Unique (88))))) (Var (Name ("arg") (Unique (89))))) (Var (Name ("arg") (Unique (90)))))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("String") (Unique (92)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (93)))) (tt)) (nil) (Name ("Unit_match") (Unique (95))) (cons (Constructor (Name ("Unit") (Unique (94))) (0)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("trace") (Unique (96))) (tt)) (LamAbs (Name ("arg") (Unique (97))) (tt) (Apply (LamAbs (Name ("b") (Unique (98))) (tt) (Var (Name ("Unit") (Unique (94))))) (Apply (Builtin (Trace)) (Var (Name ("arg") (Unique (97)))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Integer") (Unique (99)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("takeByteString") (Unique (100))) (tt)) (Builtin (TakeByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("subtractInteger") (Unique (101))) (tt)) (Builtin (SubtractInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha3_") (Unique (102))) (tt)) (Builtin (SHA3))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha2_") (Unique (103))) (tt)) (Builtin (SHA2))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("remainderInteger") (Unique (104))) (tt)) (Builtin (RemainderInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("quotientInteger") (Unique (105))) (tt)) (Builtin (QuotientInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("multiplyInteger") (Unique (106))) (tt)) (Builtin (MultiplyInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("modInteger") (Unique (107))) (tt)) (Builtin (ModInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanInteger") (Unique (108))) (tt)) (LamAbs (Name ("arg") (Unique (109))) (tt) (LamAbs (Name ("arg") (Unique (110))) (tt) (Apply (LamAbs (Name ("b") (Unique (111))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (111))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LessThanInteger)) (Var (Name ("arg") (Unique (109))))) (Var (Name ("arg") (Unique (110))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (112))) (tt)) (LamAbs (Name ("arg") (Unique (113))) (tt) (LamAbs (Name ("arg") (Unique (114))) (tt) (Apply (LamAbs (Name ("b") (Unique (115))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (115))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (113))))) (Var (Name ("arg") (Unique (114))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanByteString") (Unique (116))) (tt)) (LamAbs (Name ("arg") (Unique (117))) (tt) (LamAbs (Name ("arg") (Unique (118))) (tt) (Apply (LamAbs (Name ("b") (Unique (119))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (119))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LtByteString)) (Var (Name ("arg") (Unique (117))))) (Var (Name ("arg") (Unique (118))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanInteger") (Unique (120))) (tt)) (LamAbs (Name ("arg") (Unique (121))) (tt) (LamAbs (Name ("arg") (Unique (122))) (tt) (Apply (LamAbs (Name ("b") (Unique (123))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (123))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GreaterThanInteger)) (Var (Name ("arg") (Unique (121))))) (Var (Name ("arg") (Unique (122))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanEqInteger") (Unique (124))) (tt)) (LamAbs (Name ("arg") (Unique (125))) (tt) (LamAbs (Name ("arg") (Unique (126))) (tt) (Apply (LamAbs (Name ("b") (Unique (127))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (127))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GreaterThanEqInteger)) (Var (Name ("arg") (Unique (125))))) (Var (Name ("arg") (Unique (126))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanByteString") (Unique (128))) (tt)) (LamAbs (Name ("arg") (Unique (129))) (tt) (LamAbs (Name ("arg") (Unique (130))) (tt) (Apply (LamAbs (Name ("b") (Unique (131))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (131))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GtByteString)) (Var (Name ("arg") (Unique (129))))) (Var (Name ("arg") (Unique (130))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("error") (Unique (132))) (tt)) (TyAbs (TyName (Name ("e") (Unique (134)))) (tt) (LamAbs (Name ("thunk") (Unique (135))) (tt) (Error (tt))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsInteger") (Unique (136))) (tt)) (LamAbs (Name ("arg") (Unique (137))) (tt) (LamAbs (Name ("arg") (Unique (138))) (tt) (Apply (LamAbs (Name ("b") (Unique (139))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (139))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (EqInteger)) (Var (Name ("arg") (Unique (137))))) (Var (Name ("arg") (Unique (138))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsByteString") (Unique (140))) (tt)) (LamAbs (Name ("arg") (Unique (141))) (tt) (LamAbs (Name ("arg") (Unique (142))) (tt) (Apply (LamAbs (Name ("b") (Unique (143))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (143))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (EqByteString)) (Var (Name ("arg") (Unique (141))))) (Var (Name ("arg") (Unique (142))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyString") (Unique (144))) (tt)) (Constant (Some (ValueOf (DefaultUniString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyByteString") (Unique (145))) (tt)) (Constant (Some (ValueOf (DefaultUniByteString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("dropByteString") (Unique (146))) (tt)) (Builtin (DropByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("divideInteger") (Unique (147))) (tt)) (Builtin (DivideInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("concatenate") (Unique (148))) (tt)) (Builtin (Concatenate))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Char") (Unique (149)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("charToString") (Unique (150))) (tt)) (Builtin (CharToString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("appendString") (Unique (151))) (tt)) (Builtin (Append))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("addInteger") (Unique (152))) (tt)) (Builtin (AddInteger))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (153)))) (tt)) (nil) (Name ("EndDate_match") (Unique (156))) (cons (Constructor (Name ("Fixed") (Unique (154))) (1)) (cons (Constructor (Name ("Never") (Unique (155))) (0)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (157))) (tt) (LamAbs (Name ("ds") (Unique (158))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (159))) (tt)) (Var (Name ("False") (Unique (85))))) (nil)) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("wild") (Unique (160))) (tt)) (Var (Name ("ds") (Unique (157))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (156)))) (Var (Name ("ds") (Unique (157))))) (tt)) (LamAbs (Name ("n") (Unique (161))) (tt) (LamAbs (Name ("thunk") (Unique (162))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (112)))) (Var (Name ("n") (Unique (161))))) (Var (Name ("ds") (Unique (158)))))))) (LamAbs (Name ("thunk") (Unique (163))) (tt) (Var (Name ("keep") (Unique (159)))))) (Var (Name ("Unit") (Unique (94)))))))))))))))))))))))))))))))))))))))))).

Definition pir_2_typechecked  := Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("ByteString") (Unique (82)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (83)))) (tt)) (nil) (Name ("Bool_match") (Unique (86))) (cons (Constructor (Name ("True") (Unique (84))) (0)) (cons (Constructor (Name ("False") (Unique (85))) (0)) (nil))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("verifySignature") (Unique (87))) (tt)) (LamAbs (Name ("arg") (Unique (88))) (tt) (LamAbs (Name ("arg") (Unique (89))) (tt) (LamAbs (Name ("arg") (Unique (90))) (tt) (Apply (LamAbs (Name ("b") (Unique (91))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (91))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Apply (Builtin (VerifySignature)) (Var (Name ("arg") (Unique (88))))) (Var (Name ("arg") (Unique (89))))) (Var (Name ("arg") (Unique (90)))))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("String") (Unique (92)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (93)))) (tt)) (nil) (Name ("Unit_match") (Unique (95))) (cons (Constructor (Name ("Unit") (Unique (94))) (0)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("trace") (Unique (96))) (tt)) (LamAbs (Name ("arg") (Unique (97))) (tt) (Apply (LamAbs (Name ("b") (Unique (98))) (tt) (Var (Name ("Unit") (Unique (94))))) (Apply (Builtin (Trace)) (Var (Name ("arg") (Unique (97)))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Integer") (Unique (99)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("takeByteString") (Unique (100))) (tt)) (Builtin (TakeByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("subtractInteger") (Unique (101))) (tt)) (Builtin (SubtractInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha3_") (Unique (102))) (tt)) (Builtin (SHA3))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha2_") (Unique (103))) (tt)) (Builtin (SHA2))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("remainderInteger") (Unique (104))) (tt)) (Builtin (RemainderInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("quotientInteger") (Unique (105))) (tt)) (Builtin (QuotientInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("multiplyInteger") (Unique (106))) (tt)) (Builtin (MultiplyInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("modInteger") (Unique (107))) (tt)) (Builtin (ModInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanInteger") (Unique (108))) (tt)) (LamAbs (Name ("arg") (Unique (109))) (tt) (LamAbs (Name ("arg") (Unique (110))) (tt) (Apply (LamAbs (Name ("b") (Unique (111))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (111))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LessThanInteger)) (Var (Name ("arg") (Unique (109))))) (Var (Name ("arg") (Unique (110))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (112))) (tt)) (LamAbs (Name ("arg") (Unique (113))) (tt) (LamAbs (Name ("arg") (Unique (114))) (tt) (Apply (LamAbs (Name ("b") (Unique (115))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (115))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (113))))) (Var (Name ("arg") (Unique (114))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanByteString") (Unique (116))) (tt)) (LamAbs (Name ("arg") (Unique (117))) (tt) (LamAbs (Name ("arg") (Unique (118))) (tt) (Apply (LamAbs (Name ("b") (Unique (119))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (119))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LtByteString)) (Var (Name ("arg") (Unique (117))))) (Var (Name ("arg") (Unique (118))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanInteger") (Unique (120))) (tt)) (LamAbs (Name ("arg") (Unique (121))) (tt) (LamAbs (Name ("arg") (Unique (122))) (tt) (Apply (LamAbs (Name ("b") (Unique (123))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (123))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GreaterThanInteger)) (Var (Name ("arg") (Unique (121))))) (Var (Name ("arg") (Unique (122))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanEqInteger") (Unique (124))) (tt)) (LamAbs (Name ("arg") (Unique (125))) (tt) (LamAbs (Name ("arg") (Unique (126))) (tt) (Apply (LamAbs (Name ("b") (Unique (127))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (127))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GreaterThanEqInteger)) (Var (Name ("arg") (Unique (125))))) (Var (Name ("arg") (Unique (126))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanByteString") (Unique (128))) (tt)) (LamAbs (Name ("arg") (Unique (129))) (tt) (LamAbs (Name ("arg") (Unique (130))) (tt) (Apply (LamAbs (Name ("b") (Unique (131))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (131))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GtByteString)) (Var (Name ("arg") (Unique (129))))) (Var (Name ("arg") (Unique (130))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("error") (Unique (132))) (tt)) (TyAbs (TyName (Name ("e") (Unique (134)))) (tt) (LamAbs (Name ("thunk") (Unique (135))) (tt) (Error (tt))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsInteger") (Unique (136))) (tt)) (LamAbs (Name ("arg") (Unique (137))) (tt) (LamAbs (Name ("arg") (Unique (138))) (tt) (Apply (LamAbs (Name ("b") (Unique (139))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (139))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (EqInteger)) (Var (Name ("arg") (Unique (137))))) (Var (Name ("arg") (Unique (138))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsByteString") (Unique (140))) (tt)) (LamAbs (Name ("arg") (Unique (141))) (tt) (LamAbs (Name ("arg") (Unique (142))) (tt) (Apply (LamAbs (Name ("b") (Unique (143))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (143))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (EqByteString)) (Var (Name ("arg") (Unique (141))))) (Var (Name ("arg") (Unique (142))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyString") (Unique (144))) (tt)) (Constant (Some (ValueOf (DefaultUniString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyByteString") (Unique (145))) (tt)) (Constant (Some (ValueOf (DefaultUniByteString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("dropByteString") (Unique (146))) (tt)) (Builtin (DropByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("divideInteger") (Unique (147))) (tt)) (Builtin (DivideInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("concatenate") (Unique (148))) (tt)) (Builtin (Concatenate))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Char") (Unique (149)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("charToString") (Unique (150))) (tt)) (Builtin (CharToString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("appendString") (Unique (151))) (tt)) (Builtin (Append))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("addInteger") (Unique (152))) (tt)) (Builtin (AddInteger))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (153)))) (tt)) (nil) (Name ("EndDate_match") (Unique (156))) (cons (Constructor (Name ("Fixed") (Unique (154))) (1)) (cons (Constructor (Name ("Never") (Unique (155))) (0)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (157))) (tt) (LamAbs (Name ("ds") (Unique (158))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (159))) (tt)) (Var (Name ("False") (Unique (85))))) (nil)) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("wild") (Unique (160))) (tt)) (Var (Name ("ds") (Unique (157))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (156)))) (Var (Name ("ds") (Unique (157))))) (tt)) (LamAbs (Name ("n") (Unique (161))) (tt) (LamAbs (Name ("thunk") (Unique (162))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (112)))) (Var (Name ("n") (Unique (161))))) (Var (Name ("ds") (Unique (158)))))))) (LamAbs (Name ("thunk") (Unique (163))) (tt) (Var (Name ("keep") (Unique (159)))))) (Var (Name ("Unit") (Unique (94)))))))))))))))))))))))))))))))))))))))))).

Definition pir_3_deadcode     := Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (Constructor (Name ("True") (Unique (2))) (0)) (cons (Constructor (Name ("False") (Unique (3))) (0)) (nil))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (Constructor (Name ("Unit") (Unique (12))) (0)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (Constructor (Name ("Fixed") (Unique (72))) (1)) (cons (Constructor (Name ("Never") (Unique (73))) (0)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (77))) (tt)) (Var (Name ("False") (Unique (3))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("keep") (Unique (77)))))) (Var (Name ("Unit") (Unique (12))))))))))).

Definition pir_4_inlined      := Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (Constructor (Name ("True") (Unique (2))) (0)) (cons (Constructor (Name ("False") (Unique (3))) (0)) (nil))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (Constructor (Name ("Unit") (Unique (12))) (0)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (Constructor (Name ("Fixed") (Unique (72))) (1)) (cons (Constructor (Name ("Never") (Unique (73))) (0)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12)))))))))).

Definition pir_5_thunkrec     := Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (Constructor (Name ("True") (Unique (2))) (0)) (cons (Constructor (Name ("False") (Unique (3))) (0)) (nil))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (Constructor (Name ("Unit") (Unique (12))) (0)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (Constructor (Name ("Fixed") (Unique (72))) (1)) (cons (Constructor (Name ("Never") (Unique (73))) (0)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12)))))))))).

Definition pir_6_floatTerm    := Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (Constructor (Name ("Fixed") (Unique (72))) (1)) (cons (Constructor (Name ("Never") (Unique (73))) (0)) (nil))))) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (Constructor (Name ("True") (Unique (2))) (0)) (cons (Constructor (Name ("False") (Unique (3))) (0)) (nil))))) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (Constructor (Name ("Unit") (Unique (12))) (0)) (nil)))) (nil))))) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12))))))).

Definition plc_0_compileNS    := Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (Constructor (Name ("Fixed") (Unique (72))) (1)) (cons (Constructor (Name ("Never") (Unique (73))) (0)) (nil))))) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (Constructor (Name ("True") (Unique (2))) (0)) (cons (Constructor (Name ("False") (Unique (3))) (0)) (nil))))) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (Constructor (Name ("Unit") (Unique (12))) (0)) (nil)))) (nil))))) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12))))))).

Definition plc_1_compileTys         :=
Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (71)))) (tt) (LamAbs (Name ("Fixed") (Unique (72))) (tt) (LamAbs (Name ("Never") (Unique (73))) (tt) (LamAbs (Name ("EndDate_match") (Unique (74))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (1)))) (tt) (LamAbs (Name ("True") (Unique (2))) (tt) (LamAbs (Name ("False") (Unique (3))) (tt) (LamAbs (Name ("Bool_match") (Unique (4))) (tt) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (11)))) (tt) (LamAbs (Name ("Unit") (Unique (12))) (tt) (LamAbs (Name ("Unit_match") (Unique (13))) (tt) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (199)))) (tt) (LamAbs (Name ("case_Unit") (Unique (200))) (tt) (Var (Name ("case_Unit") (Unique (200))))))) (LamAbs (Name ("x") (Unique (201))) (tt) (Var (Name ("x") (Unique (201))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (203)))) (tt) (LamAbs (Name ("case_True") (Unique (204))) (tt) (LamAbs (Name ("case_False") (Unique (205))) (tt) (Var (Name ("case_True") (Unique (204)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (206)))) (tt) (LamAbs (Name ("case_True") (Unique (207))) (tt) (LamAbs (Name ("case_False") (Unique (208))) (tt) (Var (Name ("case_False") (Unique (208)))))))) (LamAbs (Name ("x") (Unique (209))) (tt) (Var (Name ("x") (Unique (209)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (214))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (211)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (212))) (tt) (LamAbs (Name ("case_Never") (Unique (213))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (212)))) (Var (Name ("arg_0") (Unique (214)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (215)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (216))) (tt) (LamAbs (Name ("case_Never") (Unique (217))) (tt) (Var (Name ("case_Never") (Unique (217)))))))) (LamAbs (Name ("x") (Unique (218))) (tt) (Var (Name ("x") (Unique (218))))).

Definition plc_2_compileRecTerms    := Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (71)))) (tt) (LamAbs (Name ("Fixed") (Unique (72))) (tt) (LamAbs (Name ("Never") (Unique (73))) (tt) (LamAbs (Name ("EndDate_match") (Unique (74))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (1)))) (tt) (LamAbs (Name ("True") (Unique (2))) (tt) (LamAbs (Name ("False") (Unique (3))) (tt) (LamAbs (Name ("Bool_match") (Unique (4))) (tt) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (11)))) (tt) (LamAbs (Name ("Unit") (Unique (12))) (tt) (LamAbs (Name ("Unit_match") (Unique (13))) (tt) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (199)))) (tt) (LamAbs (Name ("case_Unit") (Unique (200))) (tt) (Var (Name ("case_Unit") (Unique (200))))))) (LamAbs (Name ("x") (Unique (201))) (tt) (Var (Name ("x") (Unique (201))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (203)))) (tt) (LamAbs (Name ("case_True") (Unique (204))) (tt) (LamAbs (Name ("case_False") (Unique (205))) (tt) (Var (Name ("case_True") (Unique (204)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (206)))) (tt) (LamAbs (Name ("case_True") (Unique (207))) (tt) (LamAbs (Name ("case_False") (Unique (208))) (tt) (Var (Name ("case_False") (Unique (208)))))))) (LamAbs (Name ("x") (Unique (209))) (tt) (Var (Name ("x") (Unique (209)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (214))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (211)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (212))) (tt) (LamAbs (Name ("case_Never") (Unique (213))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (212)))) (Var (Name ("arg_0") (Unique (214)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (215)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (216))) (tt) (LamAbs (Name ("case_Never") (Unique (217))) (tt) (Var (Name ("case_Never") (Unique (217)))))))) (LamAbs (Name ("x") (Unique (218))) (tt) (Var (Name ("x") (Unique (218))))).

Definition plc_3_dbe                := Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (0)))) (tt) (LamAbs (Name ("Fixed") (Unique (1))) (tt) (LamAbs (Name ("Never") (Unique (2))) (tt) (LamAbs (Name ("EndDate_match") (Unique (3))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (5)))) (tt) (LamAbs (Name ("True") (Unique (6))) (tt) (LamAbs (Name ("False") (Unique (7))) (tt) (LamAbs (Name ("Bool_match") (Unique (8))) (tt) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (10))) (tt)) (LamAbs (Name ("arg") (Unique (11))) (tt) (LamAbs (Name ("arg") (Unique (12))) (tt) (Apply (LamAbs (Name ("b") (Unique (13))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (13))))) (Var (Name ("True") (Unique (6))))) (Var (Name ("False") (Unique (7)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (11))))) (Var (Name ("arg") (Unique (12))))))))) (nil)) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (14)))) (tt) (LamAbs (Name ("Unit") (Unique (15))) (tt) (LamAbs (Name ("Unit_match") (Unique (16))) (tt) (LamAbs (Name ("ds") (Unique (18))) (tt) (LamAbs (Name ("ds") (Unique (19))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (3)))) (Var (Name ("ds") (Unique (18))))) (tt)) (LamAbs (Name ("n") (Unique (20))) (tt) (LamAbs (Name ("thunk") (Unique (21))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (10)))) (Var (Name ("n") (Unique (20))))) (Var (Name ("ds") (Unique (19)))))))) (LamAbs (Name ("thunk") (Unique (22))) (tt) (Var (Name ("False") (Unique (7)))))) (Var (Name ("Unit") (Unique (15)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (24)))) (tt) (LamAbs (Name ("case_Unit") (Unique (25))) (tt) (Var (Name ("case_Unit") (Unique (25))))))) (LamAbs (Name ("x") (Unique (26))) (tt) (Var (Name ("x") (Unique (26))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (29)))) (tt) (LamAbs (Name ("case_True") (Unique (30))) (tt) (LamAbs (Name ("case_False") (Unique (31))) (tt) (Var (Name ("case_True") (Unique (30)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (32)))) (tt) (LamAbs (Name ("case_True") (Unique (33))) (tt) (LamAbs (Name ("case_False") (Unique (34))) (tt) (Var (Name ("case_False") (Unique (34)))))))) (LamAbs (Name ("x") (Unique (35))) (tt) (Var (Name ("x") (Unique (35)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (38))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (39)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (40))) (tt) (LamAbs (Name ("case_Never") (Unique (41))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (40)))) (Var (Name ("arg_0") (Unique (38)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (42)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (43))) (tt) (LamAbs (Name ("case_Never") (Unique (44))) (tt) (Var (Name ("case_Never") (Unique (44)))))))) (LamAbs (Name ("x") (Unique (45))) (tt) (Var (Name ("x") (Unique (45))))).

Definition plc_4_inlined            := Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (0)))) (tt) (LamAbs (Name ("Fixed") (Unique (1))) (tt) (LamAbs (Name ("Never") (Unique (2))) (tt) (LamAbs (Name ("EndDate_match") (Unique (3))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (5)))) (tt) (LamAbs (Name ("True") (Unique (6))) (tt) (LamAbs (Name ("False") (Unique (7))) (tt) (LamAbs (Name ("Bool_match") (Unique (8))) (tt) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (10))) (tt)) (LamAbs (Name ("arg") (Unique (11))) (tt) (LamAbs (Name ("arg") (Unique (12))) (tt) (Apply (LamAbs (Name ("b") (Unique (13))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (13))))) (Var (Name ("True") (Unique (6))))) (Var (Name ("False") (Unique (7)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (11))))) (Var (Name ("arg") (Unique (12))))))))) (nil)) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (14)))) (tt) (LamAbs (Name ("Unit") (Unique (15))) (tt) (LamAbs (Name ("Unit_match") (Unique (16))) (tt) (LamAbs (Name ("ds") (Unique (18))) (tt) (LamAbs (Name ("ds") (Unique (19))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (3)))) (Var (Name ("ds") (Unique (18))))) (tt)) (LamAbs (Name ("n") (Unique (20))) (tt) (LamAbs (Name ("thunk") (Unique (21))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (10)))) (Var (Name ("n") (Unique (20))))) (Var (Name ("ds") (Unique (19)))))))) (LamAbs (Name ("thunk") (Unique (22))) (tt) (Var (Name ("False") (Unique (7)))))) (Var (Name ("Unit") (Unique (15)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (24)))) (tt) (LamAbs (Name ("case_Unit") (Unique (25))) (tt) (Var (Name ("case_Unit") (Unique (25))))))) (LamAbs (Name ("x") (Unique (26))) (tt) (Var (Name ("x") (Unique (26))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (29)))) (tt) (LamAbs (Name ("case_True") (Unique (30))) (tt) (LamAbs (Name ("case_False") (Unique (31))) (tt) (Var (Name ("case_True") (Unique (30)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (32)))) (tt) (LamAbs (Name ("case_True") (Unique (33))) (tt) (LamAbs (Name ("case_False") (Unique (34))) (tt) (Var (Name ("case_False") (Unique (34)))))))) (LamAbs (Name ("x") (Unique (35))) (tt) (Var (Name ("x") (Unique (35)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (38))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (39)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (40))) (tt) (LamAbs (Name ("case_Never") (Unique (41))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (40)))) (Var (Name ("arg_0") (Unique (38)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (42)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (43))) (tt) (LamAbs (Name ("case_Never") (Unique (44))) (tt) (Var (Name ("case_Never") (Unique (44)))))))) (LamAbs (Name ("x") (Unique (45))) (tt) (Var (Name ("x") (Unique (45))))).

Definition plc_5_compileNonRecTerms := Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (0)))) (tt) (LamAbs (Name ("Fixed") (Unique (1))) (tt) (LamAbs (Name ("Never") (Unique (2))) (tt) (LamAbs (Name ("EndDate_match") (Unique (3))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (5)))) (tt) (LamAbs (Name ("True") (Unique (6))) (tt) (LamAbs (Name ("False") (Unique (7))) (tt) (LamAbs (Name ("Bool_match") (Unique (8))) (tt) (Apply (LamAbs (Name ("lessThanEqInteger") (Unique (10))) (tt) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (14)))) (tt) (LamAbs (Name ("Unit") (Unique (15))) (tt) (LamAbs (Name ("Unit_match") (Unique (16))) (tt) (LamAbs (Name ("ds") (Unique (18))) (tt) (LamAbs (Name ("ds") (Unique (19))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (3)))) (Var (Name ("ds") (Unique (18))))) (tt)) (LamAbs (Name ("n") (Unique (20))) (tt) (LamAbs (Name ("thunk") (Unique (21))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (10)))) (Var (Name ("n") (Unique (20))))) (Var (Name ("ds") (Unique (19)))))))) (LamAbs (Name ("thunk") (Unique (22))) (tt) (Var (Name ("False") (Unique (7)))))) (Var (Name ("Unit") (Unique (15)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (24)))) (tt) (LamAbs (Name ("case_Unit") (Unique (25))) (tt) (Var (Name ("case_Unit") (Unique (25))))))) (LamAbs (Name ("x") (Unique (26))) (tt) (Var (Name ("x") (Unique (26))))))) (LamAbs (Name ("arg") (Unique (11))) (tt) (LamAbs (Name ("arg") (Unique (12))) (tt) (Apply (LamAbs (Name ("b") (Unique (13))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (13))))) (Var (Name ("True") (Unique (6))))) (Var (Name ("False") (Unique (7)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (11))))) (Var (Name ("arg") (Unique (12))))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (29)))) (tt) (LamAbs (Name ("case_True") (Unique (30))) (tt) (LamAbs (Name ("case_False") (Unique (31))) (tt) (Var (Name ("case_True") (Unique (30)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (32)))) (tt) (LamAbs (Name ("case_True") (Unique (33))) (tt) (LamAbs (Name ("case_False") (Unique (34))) (tt) (Var (Name ("case_False") (Unique (34)))))))) (LamAbs (Name ("x") (Unique (35))) (tt) (Var (Name ("x") (Unique (35)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (38))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (39)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (40))) (tt) (LamAbs (Name ("case_Never") (Unique (41))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (40)))) (Var (Name ("arg_0") (Unique (38)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (42)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (43))) (tt) (LamAbs (Name ("case_Never") (Unique (44))) (tt) (Var (Name ("case_Never") (Unique (44)))))))) (LamAbs (Name ("x") (Unique (45))) (tt) (Var (Name ("x") (Unique (45))))).


(* manual test case for recognizing the inliner,
   since plutus does both inline + DBE in one step *)
Definition pir_3_inlined_keep:= Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (Constructor (Name ("True") (Unique (2))) (0)) (cons (Constructor (Name ("False") (Unique (3))) (0)) (nil))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (Constructor (Name ("Unit") (Unique (12))) (0)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (Constructor (Name ("Fixed") (Unique (72))) (1)) (cons (Constructor (Name ("Never") (Unique (73))) (0)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (77))) (tt)) (Var (Name ("False") (Unique (3))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (77)))))) (Var (Name ("Unit") (Unique (12))))))))))).


(*Old stuff, well indented*)
(*
Definition pir_0_original     := Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("ByteString") (Unique (0)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (11)))) (tt)) (nil) (Name ("Bool_match") (Unique (12))) (cons (VarDecl (Name ("True") (Unique (13))) (tt)) (cons (VarDecl (Name ("False") (Unique (14))) (tt)) (nil))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("verifySignature") (Unique (57))) (tt)) (LamAbs (Name ("arg") (Unique (53))) (tt) (LamAbs (Name ("arg") (Unique (54))) (tt) (LamAbs (Name ("arg") (Unique (55))) (tt) (Apply (LamAbs (Name ("b") (Unique (56))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (56))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Apply (Builtin (VerifySignature)) (Var (Name ("arg") (Unique (53))))) (Var (Name ("arg") (Unique (54))))) (Var (Name ("arg") (Unique (55)))))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("String") (Unique (2)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (60)))) (tt)) (nil) (Name ("Unit_match") (Unique (61))) (cons (VarDecl (Name ("Unit") (Unique (62))) (tt)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("trace") (Unique (70))) (tt)) (LamAbs (Name ("arg") (Unique (68))) (tt) (Apply (LamAbs (Name ("b") (Unique (69))) (tt) (Var (Name ("Unit") (Unique (62))))) (Apply (Builtin (Trace)) (Var (Name ("arg") (Unique (68)))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Integer") (Unique (1)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("takeByteString") (Unique (5))) (tt)) (Builtin (TakeByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("subtractInteger") (Unique (27))) (tt)) (Builtin (SubtractInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha3_") (Unique (8))) (tt)) (Builtin (SHA3))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha2_") (Unique (7))) (tt)) (Builtin (SHA2))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("remainderInteger") (Unique (32))) (tt)) (Builtin (RemainderInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("quotientInteger") (Unique (31))) (tt)) (Builtin (QuotientInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("multiplyInteger") (Unique (28))) (tt)) (Builtin (MultiplyInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("modInteger") (Unique (30))) (tt)) (Builtin (ModInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanInteger") (Unique (44))) (tt)) (LamAbs (Name ("arg") (Unique (41))) (tt) (LamAbs (Name ("arg") (Unique (42))) (tt) (Apply (LamAbs (Name ("b") (Unique (43))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (43))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (LessThanInteger)) (Var (Name ("arg") (Unique (41))))) (Var (Name ("arg") (Unique (42))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (48))) (tt)) (LamAbs (Name ("arg") (Unique (45))) (tt) (LamAbs (Name ("arg") (Unique (46))) (tt) (Apply (LamAbs (Name ("b") (Unique (47))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (47))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (45))))) (Var (Name ("arg") (Unique (46))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanByteString") (Unique (20))) (tt)) (LamAbs (Name ("arg") (Unique (17))) (tt) (LamAbs (Name ("arg") (Unique (18))) (tt) (Apply (LamAbs (Name ("b") (Unique (19))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (19))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (LtByteString)) (Var (Name ("arg") (Unique (17))))) (Var (Name ("arg") (Unique (18))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanInteger") (Unique (36))) (tt)) (LamAbs (Name ("arg") (Unique (33))) (tt) (LamAbs (Name ("arg") (Unique (34))) (tt) (Apply (LamAbs (Name ("b") (Unique (35))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (35))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (GreaterThanInteger)) (Var (Name ("arg") (Unique (33))))) (Var (Name ("arg") (Unique (34))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanEqInteger") (Unique (40))) (tt)) (LamAbs (Name ("arg") (Unique (37))) (tt) (LamAbs (Name ("arg") (Unique (38))) (tt) (Apply (LamAbs (Name ("b") (Unique (39))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (39))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (GreaterThanEqInteger)) (Var (Name ("arg") (Unique (37))))) (Var (Name ("arg") (Unique (38))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanByteString") (Unique (24))) (tt)) (LamAbs (Name ("arg") (Unique (21))) (tt) (LamAbs (Name ("arg") (Unique (22))) (tt) (Apply (LamAbs (Name ("b") (Unique (23))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (23))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (GtByteString)) (Var (Name ("arg") (Unique (21))))) (Var (Name ("arg") (Unique (22))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("error") (Unique (64))) (tt)) (TyAbs (TyName (Name ("e") (Unique (58)))) (tt) (LamAbs (Name ("thunk") (Unique (59))) (tt) (Error (tt))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsInteger") (Unique (52))) (tt)) (LamAbs (Name ("arg") (Unique (49))) (tt) (LamAbs (Name ("arg") (Unique (50))) (tt) (Apply (LamAbs (Name ("b") (Unique (51))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (51))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (EqInteger)) (Var (Name ("arg") (Unique (49))))) (Var (Name ("arg") (Unique (50))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsByteString") (Unique (16))) (tt)) (LamAbs (Name ("arg") (Unique (9))) (tt) (LamAbs (Name ("arg") (Unique (10))) (tt) (Apply (LamAbs (Name ("b") (Unique (15))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (15))))) (Var (Name ("True") (Unique (13))))) (Var (Name ("False") (Unique (14)))))) (Apply (Apply (Builtin (EqByteString)) (Var (Name ("arg") (Unique (9))))) (Var (Name ("arg") (Unique (10))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyString") (Unique (66))) (tt)) (Constant (Some (ValueOf (DefaultUniString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyByteString") (Unique (25))) (tt)) (Constant (Some (ValueOf (DefaultUniByteString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("dropByteString") (Unique (6))) (tt)) (Builtin (DropByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("divideInteger") (Unique (29))) (tt)) (Builtin (DivideInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("concatenate") (Unique (4))) (tt)) (Builtin (Concatenate))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Char") (Unique (3)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("charToString") (Unique (67))) (tt)) (Builtin (CharToString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("appendString") (Unique (65))) (tt)) (Builtin (Append))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("addInteger") (Unique (26))) (tt)) (Builtin (AddInteger))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (72))) (cons (VarDecl (Name ("Fixed") (Unique (73))) (tt)) (cons (VarDecl (Name ("Never") (Unique (74))) (tt)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (77))) (tt)) (Var (Name ("False") (Unique (14))))) (nil)) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("wild") (Unique (78))) (tt)) (Var (Name ("ds") (Unique (75))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (72)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (48)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("keep") (Unique (77)))))) (Var (Name ("Unit") (Unique (62)))))))))))))))))))))))))))))))))))))))))).

Definition pir_1_renamed      := Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("ByteString") (Unique (82)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (83)))) (tt)) (nil) (Name ("Bool_match") (Unique (86))) (cons (VarDecl (Name ("True") (Unique (84))) (tt)) (cons (VarDecl (Name ("False") (Unique (85))) (tt)) (nil))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("verifySignature") (Unique (87))) (tt)) (LamAbs (Name ("arg") (Unique (88))) (tt) (LamAbs (Name ("arg") (Unique (89))) (tt) (LamAbs (Name ("arg") (Unique (90))) (tt) (Apply (LamAbs (Name ("b") (Unique (91))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (91))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Apply (Builtin (VerifySignature)) (Var (Name ("arg") (Unique (88))))) (Var (Name ("arg") (Unique (89))))) (Var (Name ("arg") (Unique (90)))))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("String") (Unique (92)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (93)))) (tt)) (nil) (Name ("Unit_match") (Unique (95))) (cons (VarDecl (Name ("Unit") (Unique (94))) (tt)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("trace") (Unique (96))) (tt)) (LamAbs (Name ("arg") (Unique (97))) (tt) (Apply (LamAbs (Name ("b") (Unique (98))) (tt) (Var (Name ("Unit") (Unique (94))))) (Apply (Builtin (Trace)) (Var (Name ("arg") (Unique (97)))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Integer") (Unique (99)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("takeByteString") (Unique (100))) (tt)) (Builtin (TakeByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("subtractInteger") (Unique (101))) (tt)) (Builtin (SubtractInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha3_") (Unique (102))) (tt)) (Builtin (SHA3))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha2_") (Unique (103))) (tt)) (Builtin (SHA2))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("remainderInteger") (Unique (104))) (tt)) (Builtin (RemainderInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("quotientInteger") (Unique (105))) (tt)) (Builtin (QuotientInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("multiplyInteger") (Unique (106))) (tt)) (Builtin (MultiplyInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("modInteger") (Unique (107))) (tt)) (Builtin (ModInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanInteger") (Unique (108))) (tt)) (LamAbs (Name ("arg") (Unique (109))) (tt) (LamAbs (Name ("arg") (Unique (110))) (tt) (Apply (LamAbs (Name ("b") (Unique (111))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (111))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LessThanInteger)) (Var (Name ("arg") (Unique (109))))) (Var (Name ("arg") (Unique (110))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (112))) (tt)) (LamAbs (Name ("arg") (Unique (113))) (tt) (LamAbs (Name ("arg") (Unique (114))) (tt) (Apply (LamAbs (Name ("b") (Unique (115))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (115))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (113))))) (Var (Name ("arg") (Unique (114))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanByteString") (Unique (116))) (tt)) (LamAbs (Name ("arg") (Unique (117))) (tt) (LamAbs (Name ("arg") (Unique (118))) (tt) (Apply (LamAbs (Name ("b") (Unique (119))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (119))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LtByteString)) (Var (Name ("arg") (Unique (117))))) (Var (Name ("arg") (Unique (118))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanInteger") (Unique (120))) (tt)) (LamAbs (Name ("arg") (Unique (121))) (tt) (LamAbs (Name ("arg") (Unique (122))) (tt) (Apply (LamAbs (Name ("b") (Unique (123))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (123))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GreaterThanInteger)) (Var (Name ("arg") (Unique (121))))) (Var (Name ("arg") (Unique (122))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanEqInteger") (Unique (124))) (tt)) (LamAbs (Name ("arg") (Unique (125))) (tt) (LamAbs (Name ("arg") (Unique (126))) (tt) (Apply (LamAbs (Name ("b") (Unique (127))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (127))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GreaterThanEqInteger)) (Var (Name ("arg") (Unique (125))))) (Var (Name ("arg") (Unique (126))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanByteString") (Unique (128))) (tt)) (LamAbs (Name ("arg") (Unique (129))) (tt) (LamAbs (Name ("arg") (Unique (130))) (tt) (Apply (LamAbs (Name ("b") (Unique (131))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (131))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GtByteString)) (Var (Name ("arg") (Unique (129))))) (Var (Name ("arg") (Unique (130))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("error") (Unique (132))) (tt)) (TyAbs (TyName (Name ("e") (Unique (134)))) (tt) (LamAbs (Name ("thunk") (Unique (135))) (tt) (Error (tt))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsInteger") (Unique (136))) (tt)) (LamAbs (Name ("arg") (Unique (137))) (tt) (LamAbs (Name ("arg") (Unique (138))) (tt) (Apply (LamAbs (Name ("b") (Unique (139))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (139))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (EqInteger)) (Var (Name ("arg") (Unique (137))))) (Var (Name ("arg") (Unique (138))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsByteString") (Unique (140))) (tt)) (LamAbs (Name ("arg") (Unique (141))) (tt) (LamAbs (Name ("arg") (Unique (142))) (tt) (Apply (LamAbs (Name ("b") (Unique (143))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (143))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (EqByteString)) (Var (Name ("arg") (Unique (141))))) (Var (Name ("arg") (Unique (142))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyString") (Unique (144))) (tt)) (Constant (Some (ValueOf (DefaultUniString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyByteString") (Unique (145))) (tt)) (Constant (Some (ValueOf (DefaultUniByteString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("dropByteString") (Unique (146))) (tt)) (Builtin (DropByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("divideInteger") (Unique (147))) (tt)) (Builtin (DivideInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("concatenate") (Unique (148))) (tt)) (Builtin (Concatenate))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Char") (Unique (149)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("charToString") (Unique (150))) (tt)) (Builtin (CharToString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("appendString") (Unique (151))) (tt)) (Builtin (Append))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("addInteger") (Unique (152))) (tt)) (Builtin (AddInteger))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (153)))) (tt)) (nil) (Name ("EndDate_match") (Unique (156))) (cons (VarDecl (Name ("Fixed") (Unique (154))) (tt)) (cons (VarDecl (Name ("Never") (Unique (155))) (tt)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (157))) (tt) (LamAbs (Name ("ds") (Unique (158))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (159))) (tt)) (Var (Name ("False") (Unique (85))))) (nil)) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("wild") (Unique (160))) (tt)) (Var (Name ("ds") (Unique (157))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (156)))) (Var (Name ("ds") (Unique (157))))) (tt)) (LamAbs (Name ("n") (Unique (161))) (tt) (LamAbs (Name ("thunk") (Unique (162))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (112)))) (Var (Name ("n") (Unique (161))))) (Var (Name ("ds") (Unique (158)))))))) (LamAbs (Name ("thunk") (Unique (163))) (tt) (Var (Name ("keep") (Unique (159)))))) (Var (Name ("Unit") (Unique (94)))))))))))))))))))))))))))))))))))))))))).

Definition pir_2_typechecked  := Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("ByteString") (Unique (82)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (83)))) (tt)) (nil) (Name ("Bool_match") (Unique (86))) (cons (VarDecl (Name ("True") (Unique (84))) (tt)) (cons (VarDecl (Name ("False") (Unique (85))) (tt)) (nil))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("verifySignature") (Unique (87))) (tt)) (LamAbs (Name ("arg") (Unique (88))) (tt) (LamAbs (Name ("arg") (Unique (89))) (tt) (LamAbs (Name ("arg") (Unique (90))) (tt) (Apply (LamAbs (Name ("b") (Unique (91))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (91))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Apply (Builtin (VerifySignature)) (Var (Name ("arg") (Unique (88))))) (Var (Name ("arg") (Unique (89))))) (Var (Name ("arg") (Unique (90)))))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("String") (Unique (92)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (93)))) (tt)) (nil) (Name ("Unit_match") (Unique (95))) (cons (VarDecl (Name ("Unit") (Unique (94))) (tt)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("trace") (Unique (96))) (tt)) (LamAbs (Name ("arg") (Unique (97))) (tt) (Apply (LamAbs (Name ("b") (Unique (98))) (tt) (Var (Name ("Unit") (Unique (94))))) (Apply (Builtin (Trace)) (Var (Name ("arg") (Unique (97)))))))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Integer") (Unique (99)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("takeByteString") (Unique (100))) (tt)) (Builtin (TakeByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("subtractInteger") (Unique (101))) (tt)) (Builtin (SubtractInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha3_") (Unique (102))) (tt)) (Builtin (SHA3))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("sha2_") (Unique (103))) (tt)) (Builtin (SHA2))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("remainderInteger") (Unique (104))) (tt)) (Builtin (RemainderInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("quotientInteger") (Unique (105))) (tt)) (Builtin (QuotientInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("multiplyInteger") (Unique (106))) (tt)) (Builtin (MultiplyInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("modInteger") (Unique (107))) (tt)) (Builtin (ModInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanInteger") (Unique (108))) (tt)) (LamAbs (Name ("arg") (Unique (109))) (tt) (LamAbs (Name ("arg") (Unique (110))) (tt) (Apply (LamAbs (Name ("b") (Unique (111))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (111))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LessThanInteger)) (Var (Name ("arg") (Unique (109))))) (Var (Name ("arg") (Unique (110))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (112))) (tt)) (LamAbs (Name ("arg") (Unique (113))) (tt) (LamAbs (Name ("arg") (Unique (114))) (tt) (Apply (LamAbs (Name ("b") (Unique (115))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (115))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (113))))) (Var (Name ("arg") (Unique (114))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanByteString") (Unique (116))) (tt)) (LamAbs (Name ("arg") (Unique (117))) (tt) (LamAbs (Name ("arg") (Unique (118))) (tt) (Apply (LamAbs (Name ("b") (Unique (119))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (119))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (LtByteString)) (Var (Name ("arg") (Unique (117))))) (Var (Name ("arg") (Unique (118))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanInteger") (Unique (120))) (tt)) (LamAbs (Name ("arg") (Unique (121))) (tt) (LamAbs (Name ("arg") (Unique (122))) (tt) (Apply (LamAbs (Name ("b") (Unique (123))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (123))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GreaterThanInteger)) (Var (Name ("arg") (Unique (121))))) (Var (Name ("arg") (Unique (122))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanEqInteger") (Unique (124))) (tt)) (LamAbs (Name ("arg") (Unique (125))) (tt) (LamAbs (Name ("arg") (Unique (126))) (tt) (Apply (LamAbs (Name ("b") (Unique (127))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (127))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GreaterThanEqInteger)) (Var (Name ("arg") (Unique (125))))) (Var (Name ("arg") (Unique (126))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("greaterThanByteString") (Unique (128))) (tt)) (LamAbs (Name ("arg") (Unique (129))) (tt) (LamAbs (Name ("arg") (Unique (130))) (tt) (Apply (LamAbs (Name ("b") (Unique (131))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (131))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (GtByteString)) (Var (Name ("arg") (Unique (129))))) (Var (Name ("arg") (Unique (130))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("error") (Unique (132))) (tt)) (TyAbs (TyName (Name ("e") (Unique (134)))) (tt) (LamAbs (Name ("thunk") (Unique (135))) (tt) (Error (tt))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsInteger") (Unique (136))) (tt)) (LamAbs (Name ("arg") (Unique (137))) (tt) (LamAbs (Name ("arg") (Unique (138))) (tt) (Apply (LamAbs (Name ("b") (Unique (139))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (139))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (EqInteger)) (Var (Name ("arg") (Unique (137))))) (Var (Name ("arg") (Unique (138))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("equalsByteString") (Unique (140))) (tt)) (LamAbs (Name ("arg") (Unique (141))) (tt) (LamAbs (Name ("arg") (Unique (142))) (tt) (Apply (LamAbs (Name ("b") (Unique (143))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (143))))) (Var (Name ("True") (Unique (84))))) (Var (Name ("False") (Unique (85)))))) (Apply (Apply (Builtin (EqByteString)) (Var (Name ("arg") (Unique (141))))) (Var (Name ("arg") (Unique (142))))))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyString") (Unique (144))) (tt)) (Constant (Some (ValueOf (DefaultUniString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("emptyByteString") (Unique (145))) (tt)) (Constant (Some (ValueOf (DefaultUniByteString) (""))))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("dropByteString") (Unique (146))) (tt)) (Builtin (DropByteString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("divideInteger") (Unique (147))) (tt)) (Builtin (DivideInteger))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("concatenate") (Unique (148))) (tt)) (Builtin (Concatenate))) (nil)) (Let (NonRec) (cons (TypeBind (TyVarDecl (TyName (Name ("Char") (Unique (149)))) (tt)) (tt)) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("charToString") (Unique (150))) (tt)) (Builtin (CharToString))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("appendString") (Unique (151))) (tt)) (Builtin (Append))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("addInteger") (Unique (152))) (tt)) (Builtin (AddInteger))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (153)))) (tt)) (nil) (Name ("EndDate_match") (Unique (156))) (cons (VarDecl (Name ("Fixed") (Unique (154))) (tt)) (cons (VarDecl (Name ("Never") (Unique (155))) (tt)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (157))) (tt) (LamAbs (Name ("ds") (Unique (158))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (159))) (tt)) (Var (Name ("False") (Unique (85))))) (nil)) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("wild") (Unique (160))) (tt)) (Var (Name ("ds") (Unique (157))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (156)))) (Var (Name ("ds") (Unique (157))))) (tt)) (LamAbs (Name ("n") (Unique (161))) (tt) (LamAbs (Name ("thunk") (Unique (162))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (112)))) (Var (Name ("n") (Unique (161))))) (Var (Name ("ds") (Unique (158)))))))) (LamAbs (Name ("thunk") (Unique (163))) (tt) (Var (Name ("keep") (Unique (159)))))) (Var (Name ("Unit") (Unique (94)))))))))))))))))))))))))))))))))))))))))).

Definition pir_3_deadcode     := Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (VarDecl (Name ("True") (Unique (2))) (tt)) (cons (VarDecl (Name ("False") (Unique (3))) (tt)) (nil))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (VarDecl (Name ("Unit") (Unique (12))) (tt)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (VarDecl (Name ("Fixed") (Unique (72))) (tt)) (cons (VarDecl (Name ("Never") (Unique (73))) (tt)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Let (NonRec) (cons (TermBind (NonStrict) (VarDecl (Name ("keep") (Unique (77))) (tt)) (Var (Name ("False") (Unique (3))))) (nil)) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("keep") (Unique (77)))))) (Var (Name ("Unit") (Unique (12))))))))))).

Definition pir_4_inlined      := Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (VarDecl (Name ("True") (Unique (2))) (tt)) (cons (VarDecl (Name ("False") (Unique (3))) (tt)) (nil))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (VarDecl (Name ("Unit") (Unique (12))) (tt)) (nil)))) (nil)) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (VarDecl (Name ("Fixed") (Unique (72))) (tt)) (cons (VarDecl (Name ("Never") (Unique (73))) (tt)) (nil))))) (nil)) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12)))))))))) .

Definition pir_5_thunkrec     :=
  Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (VarDecl (Name ("True") (Unique (2))) (tt)) (cons (VarDecl (Name ("False") (Unique (3))) (tt)) (nil))))) (nil))
  (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (VarDecl (Name ("Unit") (Unique (12))) (tt)) (nil)))) (nil))
    (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil))
      (Let (NonRec) (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (VarDecl (Name ("Fixed") (Unique (72))) (tt)) (cons (VarDecl (Name ("Never") (Unique (73))) (tt)) (nil))))) (nil))
        (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12)))))))))).

Definition pir_6_floatTerm    := Let (NonRec)
  (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (VarDecl (Name ("Fixed") (Unique (72))) (tt)) (cons (VarDecl (Name ("Never") (Unique (73))) (tt)) (nil)))))
  (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (VarDecl (Name ("True") (Unique (2))) (tt)) (cons (VarDecl (Name ("False") (Unique (3))) (tt)) (nil)))))
  (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32)))))))))
  (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (VarDecl (Name ("Unit") (Unique (12))) (tt)) (nil)))) (nil)))))
    (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12))))))).

Definition plc_0_compileNS          :=
  Let (NonRec)
    (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("EndDate") (Unique (71)))) (tt)) (nil) (Name ("EndDate_match") (Unique (74))) (cons (VarDecl (Name ("Fixed") (Unique (72))) (tt)) (cons (VarDecl (Name ("Never") (Unique (73))) (tt)) (nil)))))
    (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Bool") (Unique (1)))) (tt)) (nil) (Name ("Bool_match") (Unique (4))) (cons (VarDecl (Name ("True") (Unique (2))) (tt)) (cons (VarDecl (Name ("False") (Unique (3))) (tt)) (nil)))))
    (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32)))))))))
    (cons (DatatypeBind (Datatype (TyVarDecl (TyName (Name ("Unit") (Unique (11)))) (tt)) (nil) (Name ("Unit_match") (Unique (13))) (cons (VarDecl (Name ("Unit") (Unique (12))) (tt)) (nil)))) (nil)))))
    (LamAbs (Name ("ds") (Unique (75))) (tt)
    (LamAbs (Name ("ds") (Unique (76))) (tt)
    (Apply (Apply (Apply (TyInst (Apply
      (Var (Name ("EndDate_match") (Unique (74))))
      (Var (Name ("ds") (Unique (75)))))
      (tt))
      (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76))))))))
      (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3))))))
      (Var (Name ("Unit") (Unique (12))))))).

Definition plc_1_compileTys         :=
  Apply (Apply (Apply (TyInst
    (TyAbs (TyName (Name ("EndDate") (Unique (71)))) (tt)
    (LamAbs (Name ("Fixed") (Unique (72))) (tt)
    (LamAbs (Name ("Never") (Unique (73))) (tt)
    (LamAbs (Name ("EndDate_match") (Unique (74))) (tt)

    (Apply (Apply (Apply (TyInst
      (TyAbs (TyName (Name ("Bool") (Unique (1)))) (tt)
      (LamAbs (Name ("True") (Unique (2))) (tt)
      (LamAbs (Name ("False") (Unique (3))) (tt)
      (LamAbs (Name ("Bool_match") (Unique (4))) (tt)

      (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt))
        (LamAbs (Name ("arg") (Unique (31))) (tt)
        (LamAbs (Name ("arg") (Unique (32))) (tt)
        (Apply
          (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3))))))
          (Apply (Apply
            (Builtin (LessThanEqInteger))
            (Var (Name ("arg") (Unique (31)))))
            (Var (Name ("arg") (Unique (32))))))))) (nil))

      (Apply (Apply (TyInst
        (TyAbs (TyName (Name ("Unit") (Unique (11)))) (tt)
        (LamAbs (Name ("Unit") (Unique (12))) (tt)
        (LamAbs (Name ("Unit_match") (Unique (13))) (tt)

        (LamAbs (Name ("ds") (Unique (75))) (tt)
        (LamAbs (Name ("ds") (Unique (76))) (tt)
          (Apply (Apply (Apply (TyInst (Apply
            (Var (Name ("EndDate_match") (Unique (74))))
            (Var (Name ("ds") (Unique (75)))))
            (tt))
            (LamAbs (Name ("n") (Unique (79))) (tt)
            (LamAbs (Name ("thunk") (Unique (80))) (tt)
            (Apply (Apply
              (Var (Name ("lessThanEqInteger") (Unique (30))))
              (Var (Name ("n") (Unique (79)))))
              (Var (Name ("ds") (Unique (76))))))))
            (LamAbs (Name ("thunk") (Unique (81))) (tt)
              (Var (Name ("False") (Unique (3))))))
          (Var (Name ("Unit") (Unique (12))))))))))
          (tt))

        (TyAbs (TyName (Name ("out_Unit") (Unique (199))))
          (tt)
        (LamAbs (Name ("case_Unit") (Unique (200))) (tt)
          (Var (Name ("case_Unit") (Unique (200)))))))
        (LamAbs (Name ("x") (Unique (201))) (tt)
          (Var (Name ("x") (Unique (201)))))))))))

      (tt))
    (TyAbs (TyName (Name ("out_Bool") (Unique (203)))) (tt)
      (LamAbs (Name ("case_True") (Unique (204))) (tt)
      (LamAbs (Name ("case_False") (Unique (205))) (tt)
      (Var (Name ("case_True") (Unique (204))))))))
    (TyAbs (TyName (Name ("out_Bool") (Unique (206))))
      (tt)
    (LamAbs (Name ("case_True") (Unique (207))) (tt)
      (LamAbs (Name ("case_False") (Unique (208))) (tt)
        (Var (Name ("case_False") (Unique (208))))))))

    (LamAbs (Name ("x") (Unique (209))) (tt)
      (Var (Name ("x") (Unique (209))))))))))
    (tt))
  (LamAbs (Name ("arg_0") (Unique (214))) (tt)
  (TyAbs (TyName (Name ("out_EndDate") (Unique (211)))) (tt)
  (LamAbs (Name ("case_Fixed") (Unique (212))) (tt)
  (LamAbs (Name ("case_Never") (Unique (213))) (tt)
  (Apply (Var (Name ("case_Fixed") (Unique (212)))) (Var (Name ("arg_0") (Unique (214))))))))))
  (TyAbs (TyName (Name ("out_EndDate") (Unique (215)))) (tt)
  (LamAbs (Name ("case_Fixed") (Unique (216))) (tt)
  (LamAbs (Name ("case_Never") (Unique (217))) (tt)
    (Var (Name ("case_Never") (Unique (217))))))))
  (LamAbs (Name ("x") (Unique (218))) (tt)
    (Var (Name ("x") (Unique (218))))).

Definition plc_2_compileRecTerms    := Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (71)))) (tt) (LamAbs (Name ("Fixed") (Unique (72))) (tt) (LamAbs (Name ("Never") (Unique (73))) (tt) (LamAbs (Name ("EndDate_match") (Unique (74))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (1)))) (tt) (LamAbs (Name ("True") (Unique (2))) (tt) (LamAbs (Name ("False") (Unique (3))) (tt) (LamAbs (Name ("Bool_match") (Unique (4))) (tt) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (30))) (tt)) (LamAbs (Name ("arg") (Unique (31))) (tt) (LamAbs (Name ("arg") (Unique (32))) (tt) (Apply (LamAbs (Name ("b") (Unique (33))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (33))))) (Var (Name ("True") (Unique (2))))) (Var (Name ("False") (Unique (3)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (31))))) (Var (Name ("arg") (Unique (32))))))))) (nil)) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (11)))) (tt) (LamAbs (Name ("Unit") (Unique (12))) (tt) (LamAbs (Name ("Unit_match") (Unique (13))) (tt) (LamAbs (Name ("ds") (Unique (75))) (tt) (LamAbs (Name ("ds") (Unique (76))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (74)))) (Var (Name ("ds") (Unique (75))))) (tt)) (LamAbs (Name ("n") (Unique (79))) (tt) (LamAbs (Name ("thunk") (Unique (80))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (30)))) (Var (Name ("n") (Unique (79))))) (Var (Name ("ds") (Unique (76)))))))) (LamAbs (Name ("thunk") (Unique (81))) (tt) (Var (Name ("False") (Unique (3)))))) (Var (Name ("Unit") (Unique (12)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (199)))) (tt) (LamAbs (Name ("case_Unit") (Unique (200))) (tt) (Var (Name ("case_Unit") (Unique (200))))))) (LamAbs (Name ("x") (Unique (201))) (tt) (Var (Name ("x") (Unique (201))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (203)))) (tt) (LamAbs (Name ("case_True") (Unique (204))) (tt) (LamAbs (Name ("case_False") (Unique (205))) (tt) (Var (Name ("case_True") (Unique (204)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (206)))) (tt) (LamAbs (Name ("case_True") (Unique (207))) (tt) (LamAbs (Name ("case_False") (Unique (208))) (tt) (Var (Name ("case_False") (Unique (208)))))))) (LamAbs (Name ("x") (Unique (209))) (tt) (Var (Name ("x") (Unique (209)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (214))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (211)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (212))) (tt) (LamAbs (Name ("case_Never") (Unique (213))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (212)))) (Var (Name ("arg_0") (Unique (214)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (215)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (216))) (tt) (LamAbs (Name ("case_Never") (Unique (217))) (tt) (Var (Name ("case_Never") (Unique (217)))))))) (LamAbs (Name ("x") (Unique (218))) (tt) (Var (Name ("x") (Unique (218))))).

Definition plc_3_dbe                := Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (0)))) (tt) (LamAbs (Name ("Fixed") (Unique (1))) (tt) (LamAbs (Name ("Never") (Unique (2))) (tt) (LamAbs (Name ("EndDate_match") (Unique (3))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (5)))) (tt) (LamAbs (Name ("True") (Unique (6))) (tt) (LamAbs (Name ("False") (Unique (7))) (tt) (LamAbs (Name ("Bool_match") (Unique (8))) (tt) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (10))) (tt)) (LamAbs (Name ("arg") (Unique (11))) (tt) (LamAbs (Name ("arg") (Unique (12))) (tt) (Apply (LamAbs (Name ("b") (Unique (13))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (13))))) (Var (Name ("True") (Unique (6))))) (Var (Name ("False") (Unique (7)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (11))))) (Var (Name ("arg") (Unique (12))))))))) (nil)) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (14)))) (tt) (LamAbs (Name ("Unit") (Unique (15))) (tt) (LamAbs (Name ("Unit_match") (Unique (16))) (tt) (LamAbs (Name ("ds") (Unique (18))) (tt) (LamAbs (Name ("ds") (Unique (19))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (3)))) (Var (Name ("ds") (Unique (18))))) (tt)) (LamAbs (Name ("n") (Unique (20))) (tt) (LamAbs (Name ("thunk") (Unique (21))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (10)))) (Var (Name ("n") (Unique (20))))) (Var (Name ("ds") (Unique (19)))))))) (LamAbs (Name ("thunk") (Unique (22))) (tt) (Var (Name ("False") (Unique (7)))))) (Var (Name ("Unit") (Unique (15)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (24)))) (tt) (LamAbs (Name ("case_Unit") (Unique (25))) (tt) (Var (Name ("case_Unit") (Unique (25))))))) (LamAbs (Name ("x") (Unique (26))) (tt) (Var (Name ("x") (Unique (26))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (29)))) (tt) (LamAbs (Name ("case_True") (Unique (30))) (tt) (LamAbs (Name ("case_False") (Unique (31))) (tt) (Var (Name ("case_True") (Unique (30)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (32)))) (tt) (LamAbs (Name ("case_True") (Unique (33))) (tt) (LamAbs (Name ("case_False") (Unique (34))) (tt) (Var (Name ("case_False") (Unique (34)))))))) (LamAbs (Name ("x") (Unique (35))) (tt) (Var (Name ("x") (Unique (35)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (38))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (39)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (40))) (tt) (LamAbs (Name ("case_Never") (Unique (41))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (40)))) (Var (Name ("arg_0") (Unique (38)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (42)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (43))) (tt) (LamAbs (Name ("case_Never") (Unique (44))) (tt) (Var (Name ("case_Never") (Unique (44)))))))) (LamAbs (Name ("x") (Unique (45))) (tt) (Var (Name ("x") (Unique (45))))).

Definition plc_4_inlined            := Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (0)))) (tt) (LamAbs (Name ("Fixed") (Unique (1))) (tt) (LamAbs (Name ("Never") (Unique (2))) (tt) (LamAbs (Name ("EndDate_match") (Unique (3))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (5)))) (tt) (LamAbs (Name ("True") (Unique (6))) (tt) (LamAbs (Name ("False") (Unique (7))) (tt) (LamAbs (Name ("Bool_match") (Unique (8))) (tt) (Let (NonRec) (cons (TermBind (Strict) (VarDecl (Name ("lessThanEqInteger") (Unique (10))) (tt)) (LamAbs (Name ("arg") (Unique (11))) (tt) (LamAbs (Name ("arg") (Unique (12))) (tt) (Apply (LamAbs (Name ("b") (Unique (13))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (13))))) (Var (Name ("True") (Unique (6))))) (Var (Name ("False") (Unique (7)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (11))))) (Var (Name ("arg") (Unique (12))))))))) (nil)) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (14)))) (tt) (LamAbs (Name ("Unit") (Unique (15))) (tt) (LamAbs (Name ("Unit_match") (Unique (16))) (tt) (LamAbs (Name ("ds") (Unique (18))) (tt) (LamAbs (Name ("ds") (Unique (19))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (3)))) (Var (Name ("ds") (Unique (18))))) (tt)) (LamAbs (Name ("n") (Unique (20))) (tt) (LamAbs (Name ("thunk") (Unique (21))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (10)))) (Var (Name ("n") (Unique (20))))) (Var (Name ("ds") (Unique (19)))))))) (LamAbs (Name ("thunk") (Unique (22))) (tt) (Var (Name ("False") (Unique (7)))))) (Var (Name ("Unit") (Unique (15)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (24)))) (tt) (LamAbs (Name ("case_Unit") (Unique (25))) (tt) (Var (Name ("case_Unit") (Unique (25))))))) (LamAbs (Name ("x") (Unique (26))) (tt) (Var (Name ("x") (Unique (26))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (29)))) (tt) (LamAbs (Name ("case_True") (Unique (30))) (tt) (LamAbs (Name ("case_False") (Unique (31))) (tt) (Var (Name ("case_True") (Unique (30)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (32)))) (tt) (LamAbs (Name ("case_True") (Unique (33))) (tt) (LamAbs (Name ("case_False") (Unique (34))) (tt) (Var (Name ("case_False") (Unique (34)))))))) (LamAbs (Name ("x") (Unique (35))) (tt) (Var (Name ("x") (Unique (35)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (38))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (39)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (40))) (tt) (LamAbs (Name ("case_Never") (Unique (41))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (40)))) (Var (Name ("arg_0") (Unique (38)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (42)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (43))) (tt) (LamAbs (Name ("case_Never") (Unique (44))) (tt) (Var (Name ("case_Never") (Unique (44)))))))) (LamAbs (Name ("x") (Unique (45))) (tt) (Var (Name ("x") (Unique (45))))).

Definition plc_5_compileNonRecTerms := Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("EndDate") (Unique (0)))) (tt) (LamAbs (Name ("Fixed") (Unique (1))) (tt) (LamAbs (Name ("Never") (Unique (2))) (tt) (LamAbs (Name ("EndDate_match") (Unique (3))) (tt) (Apply (Apply (Apply (TyInst (TyAbs (TyName (Name ("Bool") (Unique (5)))) (tt) (LamAbs (Name ("True") (Unique (6))) (tt) (LamAbs (Name ("False") (Unique (7))) (tt) (LamAbs (Name ("Bool_match") (Unique (8))) (tt) (Apply (LamAbs (Name ("lessThanEqInteger") (Unique (10))) (tt) (Apply (Apply (TyInst (TyAbs (TyName (Name ("Unit") (Unique (14)))) (tt) (LamAbs (Name ("Unit") (Unique (15))) (tt) (LamAbs (Name ("Unit_match") (Unique (16))) (tt) (LamAbs (Name ("ds") (Unique (18))) (tt) (LamAbs (Name ("ds") (Unique (19))) (tt) (Apply (Apply (Apply (TyInst (Apply (Var (Name ("EndDate_match") (Unique (3)))) (Var (Name ("ds") (Unique (18))))) (tt)) (LamAbs (Name ("n") (Unique (20))) (tt) (LamAbs (Name ("thunk") (Unique (21))) (tt) (Apply (Apply (Var (Name ("lessThanEqInteger") (Unique (10)))) (Var (Name ("n") (Unique (20))))) (Var (Name ("ds") (Unique (19)))))))) (LamAbs (Name ("thunk") (Unique (22))) (tt) (Var (Name ("False") (Unique (7)))))) (Var (Name ("Unit") (Unique (15)))))))))) (tt)) (TyAbs (TyName (Name ("out_Unit") (Unique (24)))) (tt) (LamAbs (Name ("case_Unit") (Unique (25))) (tt) (Var (Name ("case_Unit") (Unique (25))))))) (LamAbs (Name ("x") (Unique (26))) (tt) (Var (Name ("x") (Unique (26))))))) (LamAbs (Name ("arg") (Unique (11))) (tt) (LamAbs (Name ("arg") (Unique (12))) (tt) (Apply (LamAbs (Name ("b") (Unique (13))) (tt) (Apply (Apply (Apply (TyInst (Builtin (IfThenElse)) (tt)) (Var (Name ("b") (Unique (13))))) (Var (Name ("True") (Unique (6))))) (Var (Name ("False") (Unique (7)))))) (Apply (Apply (Builtin (LessThanEqInteger)) (Var (Name ("arg") (Unique (11))))) (Var (Name ("arg") (Unique (12))))))))))))) (tt)) (TyAbs (TyName (Name ("out_Bool") (Unique (29)))) (tt) (LamAbs (Name ("case_True") (Unique (30))) (tt) (LamAbs (Name ("case_False") (Unique (31))) (tt) (Var (Name ("case_True") (Unique (30)))))))) (TyAbs (TyName (Name ("out_Bool") (Unique (32)))) (tt) (LamAbs (Name ("case_True") (Unique (33))) (tt) (LamAbs (Name ("case_False") (Unique (34))) (tt) (Var (Name ("case_False") (Unique (34)))))))) (LamAbs (Name ("x") (Unique (35))) (tt) (Var (Name ("x") (Unique (35)))))))))) (tt)) (LamAbs (Name ("arg_0") (Unique (38))) (tt) (TyAbs (TyName (Name ("out_EndDate") (Unique (39)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (40))) (tt) (LamAbs (Name ("case_Never") (Unique (41))) (tt) (Apply (Var (Name ("case_Fixed") (Unique (40)))) (Var (Name ("arg_0") (Unique (38)))))))))) (TyAbs (TyName (Name ("out_EndDate") (Unique (42)))) (tt) (LamAbs (Name ("case_Fixed") (Unique (43))) (tt) (LamAbs (Name ("case_Never") (Unique (44))) (tt) (Var (Name ("case_Never") (Unique (44)))))))) (LamAbs (Name ("x") (Unique (45))) (tt) (Var (Name ("x") (Unique (45))))).
*)
